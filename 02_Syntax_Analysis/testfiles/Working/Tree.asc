/* Test Tree */

/* Should Insert:
 *	- Variable 'nl'						| Scope: 0
 *
 *	- Function 'TreeNode'				| Scope: 0
 *	- Argument 'p'						| Scope: 1
 *	- Argument 'l'						| Scope: 1
 *	- Argument 'r'						| Scope: 1
 *	- Variable 'parent'					| Scope: 1
 *	- Variable 'left'					| Scope: 1
 *	- Variable 'right'					| Scope: 1
 *	- Member 'class'					| Scope: 1
 *	- Member 'parent'					| Scope: 1
 *	- Member 'left'						| Scope: 1
 *	- Member 'right'					| Scope: 1
 *	- Member 'info'						| Scope: 1
 *	- Member 'marked'					| Scope: 1
 *
 *	- Function 'Stack'					| Scope: 0
 *	- Member 'class'					| Scope: 1
 *	- Member 'next'						| Scope: 1
 *	- Member 'data'						| Scope: 1
 *	- Member 'empty'					| Scope: 1
 *	- Argument 'self'					| Scope: 2
 *	- Member 'push'						| Scope: 1
 *	- Argument 'self'					| Scope: 2
 *	- Argument 'data'					| Scope: 2
 *	- Member 'pop'						| Scope: 1
 *	- Argument 'self'					| Scope: 2
 *	- Member 'top'						| Scope: 1
 *	- Argument 'self'					| Scope: 2
 *
 *	- Function 'PrintTree'				| Scope: 0
 *	- Argument 'root'					| Scope: 1
 *
 *	- Function 'PostOrder'				| Scope: 0
 *	- Argument 'root'					| Scope: 1
 *	- Variable 'k'						| Scope: 1
 *	- Variable 'tmp'					| Scope: 2
 *
 *	- Variable 'root'					| Scope: 0
 *	- Variable 'childL'					| Scope: 0
 *	- Variable 'childR'					| Scope: 0
 *	- Variable 'grandChildLL'			| Scope: 0
 *	- Variable 'grandChildLR'			| Scope: 0
 *	- Variable 'grandChildRL'			| Scope: 0
 *	- Variable 'grandChildRR'			| Scope: 0
 */


nl = "\n";

function TreeNode( p, l, r ) {
	parent  = 0;
	left	= 0;
	right	= 0; 
	if ( argument(0) )					parent	= p;
	if ( argument(1) )					left	= l;
	if ( argument(totalarguments()-1) )	right	= r;	// Or, if ( argument[2] ) right = r;

	return [
		{"class" : "TreeNode"},
		{"parent": parent},	
		{"left"	 : left},
		{"right" : right},
		{"info"	 : 0},
		{"marked": false}
	];
}

function Stack() {
	return [
		{"class" : "Stack"},
		{"next"  : 0},
		{"data"  : []},
		{"empty" : (function ( self ) {
			return self.next == 0;
		})},
		
		{"push"	 : (function ( self, data ) {
			self.data [self.next++] = data;
		})},
		
		{"pop"	 : (function ( self ) {
			if ( self.next > 0 )
				self.data [--self.next] = nil;
		})},
		
		{"top" 	 : (function ( self ){
			return self.data [self.next-1];
		})}
	];
}

function PrintTree( root ) {
	if ( root )
		print( root.info, ::nl );

	if ( root.left )
		PrintTree( root.left );

	if ( root.right )
		PrintTree( root.right );
}

function PostOrder( root ) {
	k = Stack();
	k..push( root );

	while ( not k.empty() ) {
		tmp = k..top();
		k..pop();
		
		if ( tmp.marked )
			print( tmp.info, nl );
		else {
			if ( tmp.left )		k..push( tmp.left );
			if ( tmp.right )	k..push( tmp.right );
			tmp.marked = true;
			k..push( tmp );
		}
	}
}


/* * * * * * * * * * * * * * * * * * * * * * * * * *
 *					  root
 *					 /    \
 *					/      \
 *				   /  	    \
 *				  /    	     \
 *			  childL	     childR
 *			  /     \        /     \
 *			 /       \  grandChildRR\
 *			/         \			     \
 *	grandChildLL  grandChildLR      grandChildRR
 * * * * * * * * * * * * * * * * * * * * * * * * * */


root 			= TreeNode();
childL 			= TreeNode();
childR 			= TreeNode();
grandChildLL 	= TreeNode();
grandChildLR 	= TreeNode();
grandChildRL 	= TreeNode();
grandChildRR 	= TreeNode();

root.info 	  		= "parent";
childL.info 	  	= "childL";
childR.info 	  	= "childR";
grandChildLL.info 	= "grandChildLL";
grandChildLR.info 	= "grandChildLR";
grandChildRL.info 	= "grandChildRL";
grandChildRR.info 	= "grandChildRR";

root.left  = childL;
root.right = childR;

childL.parent	= root;
childL.left		= grandChildLL;
childL.right	= grandChildLR;

childR.parent 	= root;
childR.left		= grandChildRL;
childR.right	= grandChildRR;

grandChildLL.parent = childL;
grandChildLR.parent = childL;

grandChildRL.parent = childR;
grandChildRL.parnet = childR;


PrintTree( root );
print( "\n", ::nl, "\n", nl );
PostOrder( root );
