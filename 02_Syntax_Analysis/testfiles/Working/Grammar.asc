/* Test Grammar */

/* Should Insert:
 *	- Variable 'a1'					| Scope: 0
 *	- Variable 'a2'					| Scope: 0
 *	- Variable 'a3'					| Scope: 0
 *	- Variable 'a4'					| Scope: 0
 *
 *	- Local Variable 'a1'			| Scope: 1
 *
 * * * * * * * * * * * * * * * * * * * * * * * *
 *	- Variable 'global_var'			| Scope: 0
 *	- Function 'foo'				| Scope: 0
 *
 *	- Function 'foo1'				| Scope: 0
 *	- Local Variable 'global_var'	| Scope: 1
 *
 *	- Variable 'i'					| Scope: 1
 *
 *	- Local Variable 'j'			| Scope: 1
 *
 * * * * * * * * * * * * * * * * * * * * * * * *
 *	- Variable 'object'				| Scope: 0
 *
 *	- Member 'a'					| Scope: 0
 *	- Member 'b'					| Scope: 0
 *	- Member 'c'					| Scope: 0
 *
 *	- Anonymous Function			| Scope: 0
 *
 * * * * * * * * * * * * * * * * * * * * * * * *
 *	- Function 'test'				| Scope: 0
 *	- Function 'test1'				| Scope: 1
 *
 * * * * * * * * * * * * * * * * * * * * * * * *
 *	- Function 'test1'				| Scope: 0
 *	- Member 'a'					| Scope: 1
 *	- Member 'x'					| Scope: 1
 *	- Member 'y'					| Scope: 1
 */


a1 = a2 = a3 = a4 = nil;

{
	local a1 = 2;
}


/* * * * * * * * * * * * * * * * * * * * * * * * */


global_var = 0;

function foo() {
	::global_var = 1;
}

print( global_var, "\n" );		// Global variable 'global_var' is 1.

function foo1() {
	local global_var = 2;
	print( global_var, "\n" );	// Local variable 'global_var' is 2.
}

print( global_var, "\n" );		// Global variable 'global_var' is 1.

global_var = global_var + 1;
global_var = global_var - 1;
global_var = global_var * 2;
global_var = global_var / 2;
global_var = global_var % global_var;

global_var = true;

if ( not global_var )
	global_var = true;
else
	global_var = false;

for ( i = 0; (i < 10 and global_var) or (i>20); ++i ) {
	i++;

	if ( i != 1 )
		print();

	if ( i <= 2 ) {
		i = 9;
		print();
		i--;
		--i;
	}

	if ( i == 1 )
		;
	else if ( i >= 4 )
		;
	else
		continue;
}

while ( not global_var ) {
	if ( local j = not global_var )
		break;
}

/* * * * * * * * * * * * * * * * * * * * * * * * */

object = [];
object = [1, 2, "test"];
object = [{"a":2}, {"b":2}, {"c":3}];

object..f();

object[0] = 2;

object["test"]	= 2;
object.test		= 2;

object = (function (){});

/* * * * * * * * * * * * * * * * * * * * * * * * */

function test() {
	function test1() {
		return test;
	}

	return test1;
}

test();
test()();
test()()();

/* * * * * * * * * * * * * * * * * * * * * * * * */

function test1() {
	return [
		{"a" : 1},
		{"x" : [{"y":[]}]}
	];
}

test1().a = 2;
